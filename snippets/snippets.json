{
    "GObject Class": {
        "prefix": "class",
        "body": [
            "class ${1:ClassName} ${2:: Object} {",
                "public ${2}() {",
                    "$0",
                "}",
            "}"
        ],
        "description": "Defines a GObject Class, with a default public constructor."
    },
    "Compact Class": {
        "prefix": "compact",
        "body": [
            "[Compact]",
            "class ${1:ClassName} {",
                "$0",
            "}"
        ],
        "description": "Defines a compact class, not derived from GLib.Object."
    },
    "While Loop": {
        "prefix": "while",
        "body": [
            "while (${1:true}) {",
                "$0",
            "}"
        ],
        "description": "While loop"
    },
    "Do While": {
        "prefix": "do",
        "body": [
            "do {",
                "$0",
            "} while (${1:true});"
        ],
        "description": "Do...While loop"
    },
    "For Loop": {
        "prefix": "for",
        "body": [
            "for (int ${1:a} = 0; ${1:a} < ${2:length}; ${1:a}++) {",
                "$0",
            "}"
        ],
        "description": "For loop"
    },
    "Foreach Loop": {
        "prefix": "foreach",
        "body": [
            "foreach (var ${1:item} in ${2:collection}) {",
                "$0",
            "}"
        ],
        "description": "Foreach loop"
    },
    "Foreach Method": {
        "prefix": "foreach",
        "body": [
            "foreach ((${1:item}) => {",
                "$2",
            "});"
        ],
        "description": "Foreach method"
    },
    "If Else": {
        "prefix": "ifelse",
        "body": [
            "if (${2:true}) {",
                "$1",
            "} else {",
                "$0",
            "}"
        ],
        "description": "If...Else conditional"
    },
    "Else If": {
        "prefix": "elif",
        "body": [
            "} else if ($1) {",
            "$0"
        ],
        "description": "Else if conditional"
    },
    "Switch Case": {
        "prefix": "switch",
        "body": [
            "switch ($0) {",
                "default:",
                    "break;",
            "}"
        ],
        "description": "Switch statement"
    },
    "Struct": {
        "prefix": "struct",
        "body": [
            "struct ${1:StructName} {",
                "$0",
            "}"
        ],
        "description": "Defines a struct type"
    },
    "Interface": {
        "prefix": "interface",
        "body": [
            "interface ${1:InterfaceName} { ",
                "$0",
            "}"
        ],
        "description": "Defines a interface"
    },
    "Enumeration": {
        "prefix": "enum",
        "body": [
            "enum ${1:EnumName} { ",
                "${0:VALUE}",
            "}"
        ],
        "description": "Defines a enumeration"
    },
    "Namespace": {
        "prefix": "namespace",
        "body": [
            "namespace ${1:NamespaceName} { ",
                "$0",
            "}"
        ],
        "description": "Defines a namespace"
    },
    "Main": {
        "prefix": "main",
        "body": [
            "public static int main(string[] args) {",
                "$0",
                "",
                "return 0;",
            "}"
        ],
        "description": "Main function"
    },

    "Add breakpoint to code": {
        "prefix": "bp",
        "body": [
            "breakpoint ();"
        ],
        "description": "Insert breakpoint to gdb debugger"
    },

    "Print to console": {
        "prefix": "print",
        "body": [
            "print (@\"$1\\n\");"
        ],
        "description": "Print output to console"
    },

    "Message": {
        "prefix": "",
        "body": [
            "message ($1);"
        ],
        "description": "Log message to console"
    },

    "Warning": {
        "prefix": "warning",
        "body": [
            "warning ($1);"
        ],
        "description": "Log warning to console"
    },

    "Critical": {
        "prefix": "",
        "body": [
            "critical ($1);"
        ],
        "description": "Log critical message to console"
    },

    "Error": {
        "prefix": "",
        "body": [
            "error ($1);"
        ],
        "description": "Log error to console"
    },

    "Debug": {
        "prefix": "",
        "body": [
            "debug ($1);"
        ],
        "description": "Log debug message to console"
    },

    "Info": {
        "prefix": "",
        "body": [
            "info ($1);"
        ],
        "description": "Log info to console"
    }
}
